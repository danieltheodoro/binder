#!/bin/bash
set -eux

# Bash
python3 -m bash_kernel.install

# Go (gophernotes)
echo "Instalando e registrando kernel de Go (gophernotes)..."
git clone --depth=1 https://github.com/gopherdata/gophernotes.git /tmp/gophernotes
cd /tmp/gophernotes
go install
mkdir -p ~/.local/share/jupyter/kernels/gophernotes
cp -r kernel/* ~/.local/share/jupyter/kernels/gophernotes
cd -


# R jÃ¡ vem configurado pelo conda + r-irkernel

# Node.js / JavaScript
echo "Instalando kernel de JavaScript (IJavascript)..."
npm install -g ijavascript
ijsinstall --install=local

# Corrigindo permissÃµes de kernels (se necessÃ¡rio)
chmod -R 755 ~/.local/share/jupyter/kernels

echo "Registrando kernel do Julia..."
julia -e 'import Pkg; Pkg.add("IJulia"); using IJulia; installkernel("Julia")'

echo "Registrando kernel do Octave..."
python3 -m pip install --upgrade --force-reinstall octave_kernel

#!/bin/bash
set -e

echo "ðŸ”§ Atualizando APT e instalando dependÃªncias..."
apt-get update || true
apt-get install -y curl git unzip build-essential pkg-config libzmq3-dev \
    php-cli php-pear perl cpanminus luarocks lua5.3 lua5.3-dev \
    libmagic-dev zlib1g-dev libgmp-dev libtinfo-dev libsqlite3-dev || true

#!/bin/bash
set -eux

# DiretÃ³rio seguro para kernels no MyBinder
KERNEL_DIR="$HOME/.local/share/jupyter/kernels"
mkdir -p "$KERNEL_DIR"

# --------------------
# Rust (wrapper)
# --------------------
echo "ðŸ”§ Registrando kernel wrapper para Rust..."
mkdir -p "$KERNEL_DIR/rust"
cat <<EOF > "$KERNEL_DIR/rust/kernel.json"
{
  "argv": ["bash", "-c", "rustc {connection_file} && ./main"],
  "display_name": "Rust (wrapper)",
  "language": "rust"
}
EOF

# --------------------
# Zig (wrapper)
# --------------------
echo "ðŸ”§ Registrando kernel wrapper para Zig..."
mkdir -p "$KERNEL_DIR/zig"
cat <<EOF > "$KERNEL_DIR/zig/kernel.json"
{
  "argv": ["bash", "-c", "zig run {connection_file}"],
  "display_name": "Zig (wrapper)",
  "language": "zig"
}
EOF

# --------------------
# Lua (wrapper)
# --------------------
echo "ðŸ”§ Registrando kernel wrapper para Lua..."
mkdir -p "$KERNEL_DIR/lua"
cat <<EOF > "$KERNEL_DIR/lua/kernel.json"
{
  "argv": ["lua", "{connection_file}"],
  "display_name": "Lua (wrapper)",
  "language": "lua"
}
EOF

# --------------------
# Perl (wrapper)
# --------------------
echo "ðŸ”§ Registrando kernel wrapper para Perl..."
mkdir -p "$KERNEL_DIR/perl"
cat <<EOF > "$KERNEL_DIR/perl/kernel.json"
{
  "argv": ["perl", "{connection_file}"],
  "display_name": "Perl (wrapper)",
  "language": "perl"
}
EOF

# --------------------
# PHP (wrapper)
# --------------------
echo "ðŸ”§ Registrando kernel wrapper para PHP..."
mkdir -p "$KERNEL_DIR/php"
cat <<EOF > "$KERNEL_DIR/php/kernel.json"
{
  "argv": ["php", "{connection_file}"],
  "display_name": "PHP (wrapper)",
  "language": "php"
}
EOF
